package hw03frequencyanalysis

import (
	"testing"

	"github.com/stretchr/testify/require" //nolint:depguard
)

func TestTop10(t *testing.T) {
	t.Run("no words in empty string", func(t *testing.T) {
		require.Len(t, Top10(""), 0)
	})

	tests := []struct {
		text     string
		expected []string
		test     string
	}{
		{
			text: `–ö–∞–∫ –≤–∏–¥–∏—Ç–µ, –æ–Ω  —Å–ø—É—Å–∫–∞–µ—Ç—Å—è  –ø–æ  –ª–µ—Å—Ç–Ω–∏—Ü–µ  –≤—Å–ª–µ–¥  –∑–∞  —Å–≤–æ–∏–º
	–¥—Ä—É–≥–æ–º   –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä–æ–º   –†–æ–±–∏–Ω–æ–º,   –≥–æ–ª–æ–≤–æ–π   –≤–Ω–∏–∑,  –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—è
	—Å—Ç—É–ø–µ–Ω—å–∫–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞—Ç—ã–ª–∫–æ–º:  –±—É–º-–±—É–º-–±—É–º.  –î—Ä—É–≥–æ–≥–æ  —Å–ø–æ—Å–æ–±–∞
	—Å—Ö–æ–¥–∏—Ç—å  —Å  –ª–µ—Å—Ç–Ω–∏—Ü—ã  –æ–Ω  –ø–æ–∫–∞  –Ω–µ  –∑–Ω–∞–µ—Ç.  –ò–Ω–æ–≥–¥–∞ –µ–º—É, –ø—Ä–∞–≤–¥–∞,
		–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±, –µ—Å–ª–∏ –±—ã  –æ–Ω
	—Ç–æ–ª—å–∫–æ   –º–æ–≥   –Ω–∞  –º–∏–Ω—É—Ç–∫—É  –ø–µ—Ä–µ—Å—Ç–∞—Ç—å  –±—É–º–∫–∞—Ç—å  –∏  –∫–∞–∫  —Å–ª–µ–¥—É–µ—Ç
	—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è. –ù–æ —É–≤—ã - —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è-—Ç–æ –µ–º—É –∏ –Ω–µ–∫–æ–≥–¥–∞.
		–ö–∞–∫ –±—ã —Ç–æ –Ω–∏ –±—ã–ª–æ, –≤–æ—Ç –æ–Ω —É–∂–µ —Å–ø—É—Å—Ç–∏–ª—Å—è  –∏  –≥–æ—Ç–æ–≤  —Å  –≤–∞–º–∏
	–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.
	- –í–∏–Ω–Ω–∏-–ü—É—Ö. –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!
		–í–∞—Å,  –≤–µ—Ä–æ—è—Ç–Ω–æ,  —É–¥–∏–≤–ª—è–µ—Ç, –ø–æ—á–µ–º—É –µ–≥–æ —Ç–∞–∫ —Å—Ç—Ä–∞–Ω–Ω–æ –∑–æ–≤—É—Ç, –∞
	–µ—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ç–æ –≤—ã —É–¥–∏–≤–∏—Ç–µ—Å—å –µ—â–µ –±–æ–ª—å—à–µ.
		–≠—Ç–æ –Ω–µ–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–¥–∞—Ä–∏–ª –µ–º—É –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä  –†–æ–±–∏–Ω.  –ù–∞–¥–æ
	–≤–∞–º  —Å–∫–∞–∑–∞—Ç—å,  —á—Ç–æ  –∫–æ–≥–¥–∞-—Ç–æ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –†–æ–±–∏–Ω –±—ã–ª –∑–Ω–∞–∫–æ–º —Å –æ–¥–Ω–∏–º
	–ª–µ–±–µ–¥–µ–º –Ω–∞ –ø—Ä—É–¥—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –∑–≤–∞–ª –ü—É—Ö–æ–º. –î–ª—è –ª–µ–±–µ–¥—è  —ç—Ç–æ  –±—ã–ª–æ
	–æ—á–µ–Ω—å   –ø–æ–¥—Ö–æ–¥—è—â–µ–µ  –∏–º—è,  –ø–æ—Ç–æ–º—É  —á—Ç–æ  –µ—Å–ª–∏  —Ç—ã  –∑–æ–≤–µ—à—å  –ª–µ–±–µ–¥—è
	–≥—Ä–æ–º–∫–æ: "–ü—É-—É—Ö! –ü—É-—É—Ö!"- –∞ –æ–Ω  –Ω–µ  –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è,  —Ç–æ  —Ç—ã  –≤—Å–µ–≥–¥–∞
	–º–æ–∂–µ—à—å  —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∞—Ä–æ—à–∫—É —Å—Ç—Ä–µ–ª—è–ª; –∞ –µ—Å–ª–∏ —Ç—ã
	–∑–≤–∞–ª –µ–≥–æ —Ç–∏—Ö–æ, —Ç–æ –≤—Å–µ –ø–æ–¥—É–º–∞—é—Ç, —á—Ç–æ —Ç—ã  –ø—Ä–æ—Å—Ç–æ  –ø–æ–¥—É–ª  —Å–µ–±–µ  –Ω–∞
	–Ω–æ—Å.  –õ–µ–±–µ–¥—å  –ø–æ—Ç–æ–º  –∫—É–¥–∞-—Ç–æ –¥–µ–ª—Å—è, –∞ –∏–º—è –æ—Å—Ç–∞–ª–æ—Å—å, –∏ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä
	–†–æ–±–∏–Ω —Ä–µ—à–∏–ª –æ—Ç–¥–∞—Ç—å –µ–≥–æ —Å–≤–æ–µ–º—É –º–µ–¥–≤–µ–∂–æ–Ω–∫—É, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ  –ø—Ä–æ–ø–∞–ª–æ
	–∑—Ä—è.
		–ê  –í–∏–Ω–Ω–∏ - —Ç–∞–∫ –∑–≤–∞–ª–∏ —Å–∞–º—É—é –ª—É—á—à—É—é, —Å–∞–º—É—é –¥–æ–±—Ä—É—é –º–µ–¥–≤–µ–¥–∏—Ü—É
	–≤  –∑–æ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º  —Å–∞–¥—É,  –∫–æ—Ç–æ—Ä—É—é  –æ—á–µ–Ω—å-–æ—á–µ–Ω—å  –ª—é–±–∏–ª  –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä
	–†–æ–±–∏–Ω.  –ê  –æ–Ω–∞  –æ—á–µ–Ω—å-–æ—á–µ–Ω—å  –ª—é–±–∏–ª–∞  –µ–≥–æ. –ï–µ –ª–∏ –Ω–∞–∑–≤–∞–ª–∏ –í–∏–Ω–Ω–∏ –≤
	—á–µ—Å—Ç—å –ü—É—Ö–∞, –∏–ª–∏ –ü—É—Ö–∞ –Ω–∞–∑–≤–∞–ª–∏ –≤ –µ–µ —á–µ—Å—Ç—å - —Ç–µ–ø–µ—Ä—å —É–∂–µ –Ω–∏–∫—Ç–æ  –Ω–µ
	–∑–Ω–∞–µ—Ç,  –¥–∞–∂–µ –ø–∞–ø–∞ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä–∞ –†–æ–±–∏–Ω–∞. –ö–æ–≥–¥–∞-—Ç–æ –æ–Ω –∑–Ω–∞–ª, –∞ —Ç–µ–ø–µ—Ä—å
	–∑–∞–±—ã–ª.
		–°–ª–æ–≤–æ–º, —Ç–µ–ø–µ—Ä—å –º–∏—à–∫—É –∑–æ–≤—É—Ç –í–∏–Ω–Ω–∏-–ü—É—Ö, –∏ –≤—ã –∑–Ω–∞–µ—Ç–µ –ø–æ—á–µ–º—É.
		–ò–Ω–æ–≥–¥–∞ –í–∏–Ω–Ω–∏-–ü—É—Ö –ª—é–±–∏—Ç –≤–µ—á–µ—Ä–∫–æ–º –≤–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∏–≥—Ä–∞—Ç—å,  –∞
	–∏–Ω–æ–≥–¥–∞,  –æ—Å–æ–±–µ–Ω–Ω–æ  –∫–æ–≥–¥–∞  –ø–∞–ø–∞  –¥–æ–º–∞,  –æ–Ω –±–æ–ª—å—à–µ –ª—é–±–∏—Ç —Ç–∏—Ö–æ–Ω—å–∫–æ
	–ø–æ—Å–∏–¥–µ—Ç—å —É –æ–≥–Ω—è –∏ –ø–æ—Å–ª—É—à–∞—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å–∫–∞–∑–∫—É.
		–í —ç—Ç–æ—Ç –≤–µ—á–µ—Ä...`,
			expected: []string{
				"–∞",
				"–æ–Ω",
				"–∏",
				"—Ç—ã",
				"—á—Ç–æ",
				"–≤",
				"–µ–≥–æ",
				"–µ—Å–ª–∏",
				"–∫—Ä–∏—Å—Ç–æ—Ñ–µ—Ä",
				"–Ω–µ",
			},
			test: "original",
		},
		{
			text: `cat and dog, one dog,two cats and one man
					–Ω–æ–≥–∞! –Ω–æ–≥–∞ –Ω–æ–≥–∞,  '–Ω–æ–≥–∞'  –ù–æ–≥–∞
					–∫–∞–∫–æ–π-—Ç–æ –∫–∞–∫–æ–π—Ç–æ -
					dog,cat dog...cat dogcat - ------------ abcde --
					-------
					-

					'cat' "dog" "dog' cat+dog=catdog+ cat* dog\ cat= cat- 

					cat and dog, one dog,two cats and one man`,
			expected: []string{
				"cat",
				"dog",
				"–Ω–æ–≥–∞",
				"and",
				"one",
				"cats",
				"dog,two",
				"man",
				"--",
				"-------",
			},
			test: "ru+en with punctuations",
		},
		{
			text:     `–∞ –± –≤ –≥ –¥ –µ –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —å —ã —ä —ç —é —è`,
			expected: []string{"–∞", "–±", "–≤", "–≥", "–¥", "–µ", "–∂", "–∑", "–∏", "–π"},
			test:     "ru alphabet",
		},
		{
			text:     `üòé ü§™üò∑ üòá`,
			expected: []string{"üòá", "üòé", "ü§™üò∑"},
			test:     "emoji",
		},
	}

	for _, test := range tests {
		t.Run(test.test, func(t *testing.T) {
			require.Equal(t, test.expected, Top10(test.text))
		})
	}
}
